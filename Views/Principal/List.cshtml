@model List<dershane.Models.User>
@{
    ViewData["Title"] = "User List - Principal";
}

@section Styles {
    <style>
        body {
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
            min-height: 100vh;
            font-family: 'Inter', sans-serif;
            color: #ffffff;
        }

        .dashboard-container {
            padding: 2rem 0;
            min-height: 100vh;
        }

        .main-card {
            background: rgba(15, 15, 35, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }

        .card-header-custom {
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.2) 0%, rgba(139, 92, 246, 0.2) 100%);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 2rem;
        }

        .header-content {
            display: flex;
            justify-content: between;
            align-items: center;
            gap: 2rem;
        }

        .page-title {
            font-size: 2.5rem;
            font-weight: 800;
            background: linear-gradient(135deg, #ffffff 0%, #e2e8f0 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin: 0;
        }

        .page-subtitle {
            color: rgba(255, 255, 255, 0.7);
            font-size: 1.1rem;
            margin: 0.5rem 0 0 0;
        }

        .btn-modern {
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
            border: none;
            border-radius: 12px;
            padding: 0.75rem 1.5rem;
            color: white;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);
        }

        .btn-modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
            color: white;
        }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            padding: 2rem;
            margin: 0;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.08);
            border-color: rgba(99, 102, 241, 0.3);
        }

        .stat-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: #6366f1;
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 800;
            color: #ffffff;
            margin: 0;
        }

        .stat-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
            margin: 0.5rem 0 0 0;
        }

        .search-container {
            margin: 2rem;
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .search-input {
            flex: 1;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 0.75rem 1rem;
            color: white;
            backdrop-filter: blur(10px);
        }

        .search-input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .search-input:focus {
            outline: none;
            border-color: #6366f1;
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
            background: rgba(255, 255, 255, 0.08);
        }

        .filter-dropdown {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 0.75rem 1rem;
            color: white;
            backdrop-filter: blur(10px);
            min-width: 150px;
        }

        .filter-dropdown:focus {
            outline: none;
            border-color: #6366f1;
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
        }

        .filter-dropdown option {
            background: #1a1a2e;
            color: white;
        }

        .table-container {
            margin: 2rem;
            background: rgba(255, 255, 255, 0.02);
            border-radius: 16px;
            padding: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        .modern-table {
            width: 100%;
            background: transparent;
            border-collapse: separate;
            border-spacing: 0;
        }

        .modern-table thead th {
            background: rgba(255, 255, 255, 0.05);
            color: rgba(255, 255, 255, 0.9);
            font-weight: 600;
            padding: 1rem;
            border: none;
            border-bottom: 2px solid rgba(99, 102, 241, 0.3);
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .modern-table thead th:first-child {
            border-top-left-radius: 12px;
        }

        .modern-table thead th:last-child {
            border-top-right-radius: 12px;
        }

        .table-row {
            background: rgba(255, 255, 255, 0.02);
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            transition: all 0.3s ease;
        }

        .table-row:hover {
            background: rgba(99, 102, 241, 0.1);
            transform: translateX(5px);
        }

        .table-row td {
            padding: 1rem;
            border: none;
            color: rgba(255, 255, 255, 0.9);
            vertical-align: middle;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-avatar {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 0.9rem;
            color: white;
            box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);
        }

        .user-details h6 {
            margin: 0;
            font-weight: 600;
            color: white;
            font-size: 1rem;
        }

        .user-details small {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.85rem;
        }

        .badge {
            background: rgba(99, 102, 241, 0.2) !important;
            color: #a5b4fc !important;
            border: 1px solid rgba(99, 102, 241, 0.3);
            padding: 0.4rem 0.8rem;
            border-radius: 8px;
            font-weight: 500;
        }

        .role-badge {
            padding: 0.4rem 0.8rem;
            border-radius: 8px;
            font-weight: 500;
            font-size: 0.85rem;
            display: inline-flex;
            align-items: center;
        }

        .role-student {
            background: rgba(34, 197, 94, 0.2);
            color: #86efac;
            border: 1px solid rgba(34, 197, 94, 0.3);
        }

        .role-teacher {
            background: rgba(59, 130, 246, 0.2);
            color: #93c5fd;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .role-principal {
            background: rgba(168, 85, 247, 0.2);
            color: #c4b5fd;
            border: 1px solid rgba(168, 85, 247, 0.3);
        }

        .btn-action {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 0.5rem;
            color: rgba(255, 255, 255, 0.8);
            transition: all 0.3s ease;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 35px;
            height: 35px;
        }

        .btn-edit:hover {
            background: rgba(59, 130, 246, 0.2);
            border-color: rgba(59, 130, 246, 0.3);
            color: #93c5fd;
            transform: scale(1.1);
        }

        .btn-delete:hover {
            background: rgba(239, 68, 68, 0.2);
            border-color: rgba(239, 68, 68, 0.3);
            color: #fca5a5;
            transform: scale(1.1);
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: rgba(255, 255, 255, 0.8);
        }

        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 1.5rem;
            opacity: 0.3;
            color: #6366f1;
        }

        .empty-state h3 {
            color: white;
            margin-bottom: 1rem;
            font-weight: 600;
        }

        .empty-state p {
            font-size: 1.1rem;
              margin-bottom: 2rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .pagination-container {
            display: flex;
            justify-content: center;
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .pagination-modern {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .page-btn {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 0.5rem 0.75rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: all 0.3s ease;
            min-width: 40px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .page-btn:hover {
            background: rgba(99, 102, 241, 0.2);
            border-color: rgba(99, 102, 241, 0.3);
            color: #a5b4fc;
            transform: translateY(-2px);
        }

        .page-btn.active {
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
            border-color: #6366f1;
            color: white;
            box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);
        }

        .page-btn:disabled {
            opacity: 0.3;
            cursor: not-allowed;
            pointer-events: none;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .page-title {
                font-size: 2rem;
            }

            .stats-container {
                grid-template-columns: repeat(2, 1fr);
                gap: 1rem;
                padding: 1rem;
            }

            .search-container {
                flex-direction: column;
                margin: 1rem;
                gap: 0.75rem;
            }

            .table-container {
                margin: 1rem;
                padding: 1rem;
                overflow-x: auto;
            }

            .modern-table {
                min-width: 600px;
            }

            .table-row td {
                padding: 0.8rem 0.5rem;
                font-size: 0.9rem;
            }

            .user-info {
                flex-direction: column;
                text-align: center;
                gap: 0.5rem;
            }
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid #6366f1;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .alert-modern {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(30, 30, 46, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1rem 1.5rem;
            color: white;
            z-index: 1000;
            animation: slideInRight 0.3s ease-out;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .alert-modern.alert-success {
            border-left: 4px solid #22c55e;
            background: rgba(34, 197, 94, 0.1);
        }

        .alert-modern.alert-danger {
            border-left: 4px solid #ef4444;
            background: rgba(239, 68, 68, 0.1);
        }

        .alert-modern.alert-warning {
            border-left: 4px solid #f59e0b;
            background: rgba(245, 158, 11, 0.1);
        }

        .alert-modern.alert-info {
            border-left: 4px solid #3b82f6;
            background: rgba(59, 130, 246, 0.1);
        }

        @@keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @@keyframes slideOutRight {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        /* Modal Styles */
        .modal-content {
            background: rgba(15, 15, 35, 0.95) !important;
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1) !important;
            border-radius: 15px !important;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
        }

        .modal-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1) !important;
        }

        .modal-footer {
            border-top: 1px solid rgba(255, 255, 255, 0.1) !important;
        }

        .modal-title {
            color: white !important;
            font-weight: 600;
        }

        .btn-close-white {
            filter: invert(1) grayscale(100%) brightness(200%);
        }

        /* Scrollbar Styling */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: rgba(99, 102, 241, 0.3);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: rgba(99, 102, 241, 0.5);
        }

        /* Focus States for Accessibility */
        .btn-modern:focus,
        .search-input:focus,
        .filter-dropdown:focus,
        .btn-action:focus {
            outline: 2px solid #6366f1;
            outline-offset: 2px;
        }

        /* Animation for table rows */
        .table-row {
            animation: fadeInUp 0.3s ease-out;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Hover effects for better UX */
        .stat-card:hover .stat-icon {
            transform: scale(1.1);
            transition: transform 0.3s ease;
        }

        .user-avatar:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(99, 102, 241, 0.4);
        }

        /* Loading states */
        .table-row.loading {
            opacity: 0.5;
            pointer-events: none;
        }

        .table-row.loading::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            animation: shimmer 1.5s infinite;
        }

        @@keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        /* Success/Error states */
        .table-row.success {
            border-left: 4px solid #22c55e;
            background: rgba(34, 197, 94, 0.05);
        }

        .table-row.error {
            border-left: 4px solid #ef4444;
            background: rgba(239, 68, 68, 0.05);
        }

        /* Dark theme enhancements */
        body.dark-theme {
            background: linear-gradient(135deg, #000000 0%, #0a0a0a 50%, #1a1a1a 100%);
        }

        body.dark-theme .main-card {
            background: rgba(0, 0, 0, 0.95);
            border-color: rgba(255, 255, 255, 0.05);
        }

        body.dark-theme .table-row:hover {
            background: rgba(99, 102, 241, 0.05);
        }

        /* Print styles */
        @@media print {
            body {
                background: white !important;
                color: black !important;
            }

            .main-card {
                background: white !important;
                border: 1px solid #ddd !important;
                box-shadow: none !important;
            }

            .btn-modern,
            .search-container,
            .pagination-container {
                display: none !important;
            }

            .table-row {
                background: white !important;
                border-bottom: 1px solid #ddd !important;
            }

            .page-title {
                color: black !important;
                background: none !important;
                -webkit-text-fill-color: black !important;
            }
        }
    </style>
}
<div class="dashboard-container">
    <div class="container-fluid">
        <div class="main-card">
            <div class="card-header-custom">
                <div class="header-content">
                    <div>
                        <h1 class="page-title">
                            <i class="bi bi-people-fill me-3"></i>Kullanıcı Yönetimi
                        </h1>
                        <p class="page-subtitle">Tüm kullanıcıları görüntüleyin ve yönetin</p>
                    </div>
                    <div>
                        <a asp-action="AddUser" class="btn btn-modern">
                            <i class="bi bi-person-plus-fill me-2"></i>Yeni Kullanıcı Ekle
                        </a>
                    </div>
                </div>
            </div>

            <!-- İstatistikler -->
            <div class="stats-container">
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="bi bi-people"></i>
                    </div>
                    <h3 class="stat-number">@Model.Count</h3>
                    <p class="stat-label">Toplam Kullanıcı</p>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="bi bi-mortarboard"></i>
                    </div>
                    <h3 class="stat-number">@Model.Count(u => u.role == "student")</h3>
                    <p class="stat-label">Öğrenci</p>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="bi bi-person-workspace"></i>
                    </div>
                    <h3 class="stat-number">@Model.Count(u => u.role == "teacher")</h3>
                    <p class="stat-label">Öğretmen</p>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="bi bi-shield-check"></i>
                    </div>
                    <h3 class="stat-number">@Model.Count(u => u.role == "principal")</h3>
                    <p class="stat-label">Müdür</p>
                </div>
            </div>

            @if (Model.Any())
            {
                <!-- Arama ve Filtreleme -->
                <div class="search-container">
                    <input type="text" class="search-input" id="searchInput" placeholder="Kullanıcı ara...">
                    <select class="filter-dropdown" id="roleFilter">
                        <option value="">Tüm Roller</option>
                        <option value="student">Öğrenci</option>
                        <option value="teacher">Öğretmen</option>
                        <option value="principal">Müdür</option>
                    </select>
                    <button class="btn btn-modern" onclick="exportToCSV()">
                        <i class="bi bi-download me-2"></i>Dışa Aktar
                    </button>
                </div>

                <!-- Kullanıcı Tablosu -->
                <div class="table-container">
                    <div class="table-responsive">
                        <table class="modern-table table">
                            <thead>
                                <tr>
                                    <th>Kullanıcı</th>
                                    <th>Okul No</th>
                                    <th>Rol</th>
                                    <th>İletişim</th>
                                    <th>İşlemler</th>
                                </tr>
                            </thead>
                            <tbody id="userTableBody">
                                @foreach (var user in Model)
                                {
                                    <tr class="table-row" data-role="@user.role">
                                        <td>
                                            <div class="user-info">
                                                <div class="user-avatar">
                                                    @(user.firstname?.Substring(0, 1).ToUpper())@(user.lastname?.Substring(0, 1).ToUpper())
                                                </div>
                                                <div class="user-details">
                                                    <h6>@user.firstname @user.lastname</h6>
                                                    <small></small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge bg-secondary">@user.dershaneid</span>
                                        </td>
                                        <td>
                                            <span class="role-badge role-@user.role">
                                                @if (user.role == "student")
                                                {
                                                    <i class="bi bi-mortarboard me-1"></i>@:Öğrenci
                                                }
                                                else if (user.role == "teacher")
                                                {
                                                    <i class="bi bi-person-workspace me-1"></i>@:Öğretmen
                                                }
                                                else if (user.role == "principal")
                                                {
                                                    <i class="bi bi-shield-check me-1"></i>@:Müdür
                                                }
                                            </span>
                                        </td>
                                        <td>

                                        </td>
                                        <td>
                                            <div class="d-flex gap-1">
                                                <a asp-action="EditUser" asp-route-id="@user.dershaneid"
                                                   class="btn-action btn-edit" title="Düzenle">
                                                    <i class="bi bi-pencil"></i>
                                                </a>
                                                <button type="button" class="btn-action btn-delete" 
                                                        onclick="deleteUser(@user.dershaneid, '@user.firstname @user.lastname')" 
                                                        title="Sil">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Sayfalama -->
                    <div class="pagination-container">
                        <div class="pagination-modern" id="pagination">
                            <!-- Pagination will be generated by JavaScript -->
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="bi bi-people"></i>
                    </div>
                    <h3>Henüz kullanıcı bulunmuyor</h3>
                    <p>Sisteme ilk kullanıcıyı ekleyerek başlayın.</p>
                    <a asp-action="AddUser" class="btn btn-modern">
                        <i class="bi bi-person-plus-fill me-2"></i>İlk Kullanıcıyı Ekle
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content" style="background: rgba(30, 30, 46, 0.95); backdrop-filter: blur(20px); border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 15px;">
            <div class="modal-header border-0">
                <h5 class="modal-title text-white">
                    <i class="bi bi-exclamation-triangle me-2"></i>Kullanıcıyı Sil
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-white">
                <p><strong id="deleteUserName"></strong> kullanıcısını silmek istediğinizden emin   misiniz?</p>
                <p class="text-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Bu işlem geri alınamaz ve kullanıcının tüm verileri silinecektir.
                </p>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-modern" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-2"></i>İptal
                </button>
                <form asp-action="DeleteUser" method="post" style="display: inline;">
                    <input type="hidden" name="id" id="deleteUserId">
                    <button type="submit" class="btn btn-modern" style="background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);">
                        <i class="bi bi-trash me-2"></i>Sil
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global variables
        let currentPage = 1;
        const itemsPerPage = 10;
        let filteredUsers = [];
        let allUsers = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeUserList();
            initializeSearch();
            initializeFilters();
            initializePagination();
            initializeKeyboardShortcuts();
            showSuccessMessage();
        });

        // Initialize user list
        function initializeUserList() {
            const rows = document.querySelectorAll('.table-row');
            allUsers = Array.from(rows).map(row => ({
                element: row,
                name: row.querySelector('.user-details h6').textContent.toLowerCase(),
                email: row.querySelector('.user-details small').textContent.toLowerCase(),
                role: row.dataset.role,
                schoolId: row.querySelector('.badge').textContent
            }));
            filteredUsers = [...allUsers];
            updatePagination();
        }

        // Search functionality
        function initializeSearch() {
            const searchInput = document.getElementById('searchInput');
            let searchTimeout;

            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    performSearch();
                }, 300);
            });
        }

        function performSearch() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const roleFilter = document.getElementById('roleFilter').value;

            filteredUsers = allUsers.filter(user => {
                const matchesSearch = searchTerm === '' || 
                    user.name.includes(searchTerm) || 
                    user.email.includes(searchTerm) ||
                    user.schoolId.includes(searchTerm);
                
                const matchesRole = roleFilter === '' || user.role === roleFilter;
                
                return matchesSearch && matchesRole;
            });

            currentPage = 1;
            updatePagination();
            updateDisplay();
        }

        // Filter functionality
        function initializeFilters() {
            const roleFilter = document.getElementById('roleFilter');
            roleFilter.addEventListener('change', performSearch);
        }

        // Pagination
        function initializePagination() {
            updatePagination();
        }

        function updatePagination() {
            const totalPages = Math.ceil(filteredUsers.length / itemsPerPage);
            const paginationContainer = document.getElementById('pagination');
            
            if (totalPages <= 1) {
                paginationContainer.innerHTML = '';
                return;
            }

            let paginationHTML = '';

            // Previous button
            if (currentPage > 1) {
                paginationHTML += `<a href="#" class="page-btn" onclick="changePage(${currentPage - 1})">
                    <i class="bi bi-chevron-left"></i>
                </a>`;
            }

            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            if (startPage > 1) {
                paginationHTML += `<a href="#" class="page-btn" onclick="changePage(1)">1</a>`;
                if (startPage > 2) {
                    paginationHTML += `<span class="page-btn">...</span>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `<a href="#" class="page-btn ${i === currentPage ? 'active' : ''}" 
                    onclick="changePage(${i})">${i}</a>`;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHTML += `<span class="page-btn">...</span>`;
                }
                paginationHTML += `<a href="#" class="page-btn" onclick="changePage(${totalPages})">${totalPages}</a>`;
            }

            // Next button
            if (currentPage < totalPages) {
                paginationHTML += `<a href="#" class="page-btn" onclick="changePage(${currentPage + 1})">
                    <i class="bi bi-chevron-right"></i>
                </a>`;
            }

            paginationContainer.innerHTML = paginationHTML;
        }

        function changePage(page) {
            currentPage = page;
            updatePagination();
            updateDisplay();
            
            // Scroll to top of table
            document.querySelector('.table-container').scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }

        function updateDisplay() {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            // Hide all rows
            allUsers.forEach(user => {
                user.element.style.display = 'none';
            });

            // Show filtered and paginated rows
            filteredUsers.slice(startIndex, endIndex).forEach(user => {
                user.element.style.display = '';
            });

            // Update results info
            updateResultsInfo();
        }

        function updateResultsInfo() {
            const startIndex = (currentPage - 1) * itemsPerPage + 1;
            const endIndex = Math.min(currentPage * itemsPerPage, filteredUsers.length);
            
            let infoElement = document.querySelector('.results-info');
            if (!infoElement) {
                infoElement = document.createElement('div');
                infoElement.className = 'results-info text-white mb-3';
                document.querySelector('.table-container').insertBefore(infoElement, document.querySelector('.table-responsive'));
            }

            if (filteredUsers.length === 0) {
                infoElement.innerHTML = '<i class="bi bi-info-circle me-2"></i>Arama kriterlerinize uygun kullanıcı bulunamadı.';
            } else {
                infoElement.innerHTML = `<i class="bi bi-info-circle me-2"></i>${startIndex}-${endIndex} arası gösteriliyor (Toplam ${filteredUsers.length} kullanıcı)`;
            }
        }

        // Delete user functionality
        function deleteUser(userId, userName) {
            document.getElementById('deleteUserId').value = userId;
            document.getElementById('deleteUserName').textContent = userName;
            
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        // Export functionality
        function exportToCSV() {
            showLoading();
            
            setTimeout(() => {
                const csvContent = generateCSV();
                downloadCSV(csvContent, 'kullanicilar.csv');
                hideLoading();
                showAlert('Kullanıcı listesi başarıyla dışa aktarıldı!', 'success');
            }, 1000);
        }

        function generateCSV() {
            const headers = ['Ad Soyad', 'Email', 'Okul No', 'Rol', 'Telefon'];
            let csv = headers.join(',') + '\n';

            filteredUsers.forEach(user => {
                const row = user.element;
                const name = row.querySelector('.user-details h6').textContent;
                const email = row.querySelector('.user-details small').textContent;
                const schoolId = row.querySelector('.badge').textContent;
                const role = user.role === 'student' ? 'Öğrenci' : 
                           user.role === 'teacher' ? 'Öğretmen' : 'Müdür';
                const phone = row.querySelector('td:nth-child(4) small').textContent.replace('📞 ', '') || '-';

                csv += `"${name}","${email}","${schoolId}","${role}","${phone}"\n`;
            });

            return csv;
        }

        function downloadCSV(content, filename) {
            const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', filename);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }

        // Keyboard shortcuts
        function initializeKeyboardShortcuts() {
            document.addEventListener('keydown', function(e) {
                // Ctrl/Cmd + K for search focus
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                    e.preventDefault();
                    document.getElementById('searchInput').focus();
                }

                // Ctrl/Cmd + N for new user
                if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
                    e.preventDefault();
                    window.location.href = '@Url.Action("AddUser")';
                }

                // Escape to clear search
                if (e.key === 'Escape') {
                    const searchInput = document.getElementById('searchInput');
                    if (searchInput === document.activeElement) {
                        searchInput.value = '';
                        performSearch();
                        searchInput.blur();
                    }
                }

                // Arrow keys for pagination
                if (e.key === 'ArrowLeft' && e.ctrlKey && currentPage > 1) {
                    e.preventDefault();
                    changePage(currentPage - 1);
                }

                if (e.key === 'ArrowRight' && e.ctrlKey) {
                    e.preventDefault();
                    const totalPages = Math.ceil(filteredUsers.length / itemsPerPage);
                    if (currentPage < totalPages) {
                        changePage(currentPage + 1);
                    }
                }
            });
        }

        // Loading overlay
        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        // Alert system
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert-modern alert-${type}`;
            
            const icon = type === 'success' ? 'check-circle-fill' : 
                        type === 'error' ? 'exclamation-triangle-fill' : 
                        'info-circle-fill';
            
            alertDiv.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="bi bi-${icon} me-2"></i>
                    <span>${message}</span>
                    <button type="button" class="btn-close btn-close-white ms-auto" 
                            onclick="this.parentElement.remove()"></button>
                </div>
            `;
            document.body.appendChild(alertDiv);
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }
        initializeTable();
        function showSuccessMessage() {
            const urlParams = new URLSearchParams(window.location.search);
            const success = urlParams.get('success');
            if (success) {
                showAlert(success, 'success');
            }
        }
        showSuccessMessage();
    </script>
}