@model dershane.ViewModels.CreateClassViewModel
@{
    ViewData["Title"] = "Sınıf Oluştur";
}

<div class="create-class-wrapper container-xxl py-4">
    <!-- Hero Başlık -->
    <div class="card hero-card shadow-lg border-0 mb-4">
        <div class="card-body d-flex flex-column flex-lg-row align-items-center justify-content-between gap-3 p-4 p-lg-5">
            <div class="d-flex align-items-center gap-3">
                <div class="hero-icon">🏫</div>
                <div>
                    <h1 class="hero-title mb-1">Yeni Sınıf Oluştur</h1>
                    <p class="hero-subtitle mb-0">Sınıf adı belirleyin, öğretmen atayın ve öğrencileri seçin.</p>
                </div>
            </div>
            <div class="text-center text-lg-end">
                <a asp-action="Classes" class="btn btn-outline-light btn-sm">
                    <i class="bi bi-arrow-left me-2"></i>Sınıflara Dön
                </a>
            </div>
        </div>
    </div>

    <!-- Sınıf Oluşturma Formu -->
    <div class="card shadow-sm border-0">
        <div class="card-header bg-transparent d-flex align-items-center">
            <i class="bi bi-gear-fill me-2 text-primary"></i>
            <h5 class="mb-0">Sınıf Yapılandırması</h5>
        </div>
        <div class="card-body p-4 p-lg-5">
            <form asp-action="CreateClass" method="post" id="createClassForm">
                @Html.AntiForgeryToken()
                <div asp-validation-summary="All" class="alert alert-danger" style="display: none;"></div>

                <!-- Sınıf Adı -->
                <div class="mb-4">
                    <label asp-for="ClassName" class="form-label fw-semibold">
                        <i class="bi bi-bookmark-fill me-2 text-primary"></i>Sınıf Adı
                    </label>
                    <input asp-for="ClassName" class="form-control form-control-lg" 
                           placeholder="Sınıf adını girin (örn: 9-A, 10-B)" required />
                    <span asp-validation-for="ClassName" class="text-danger"></span>
                </div>

                <!-- Öğretmen Seçimi -->
                <div class="mb-4">
                    <label asp-for="TeacherId" class="form-label fw-semibold">
                        <i class="bi bi-person-badge-fill me-2 text-success"></i>Öğretmen Ata
                    </label>
                    <select asp-for="TeacherId" class="form-select form-select-lg">
                        <option value="">-- Öğretmen Seçin (İsteğe Bağlı) --</option>
                        @foreach (var teacher in Model.AvailableTeachers)
                        {
                            <option value="@teacher.dershaneid">
                                @teacher.firstname @teacher.lastname (@teacher.dershaneid)
                            </option>
                        }
                    </select>
                    @if (!Model.AvailableTeachers.Any())
                    {
                        <div class="alert alert-warning mt-2">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Müsait öğretmen bulunamadı. Tüm öğretmenler zaten sınıflara atanmış.
                        </div>
                    }
                </div>

                <!-- Öğrenci Seçimi -->
                <div class="mb-4">
                    <label class="form-label fw-semibold">
                        <i class="bi bi-people-fill me-2 text-info"></i>Öğrenci Seçimi
                    </label>
                    
                    @if (Model.AvailableStudents.Any())
                    {
                        <!-- Arama ve Filtre -->
                        <div class="student-selection-header mb-3">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <input type="text" id="studentSearch" class="form-control" 
                                           placeholder="Öğrenci adı veya numarası ile ara...">
                                </div>
                                <div class="col-6 col-md-3">
                                    <button type="button" class="btn btn-outline-primary w-100" onclick="selectAllStudents()">
                                        <i class="bi bi-check-all me-2"></i>Tümünü Seç
                                    </button>
                                </div>
                                <div class="col-6 col-md-3">
                                    <button type="button" class="btn btn-outline-secondary w-100" onclick="clearAllStudents()">
                                        <i class="bi bi-x-circle me-2"></i>Temizle
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Öğrenci Listesi -->
                        <div class="students-container">
                            <div class="row g-2" id="studentsGrid">
                                @foreach (var student in Model.AvailableStudents)
                                {
                                    <div class="col-lg-6 col-xl-4 student-item" 
                                         data-name="@student.firstname @student.lastname" 
                                         data-id="@student.dershaneid">
                                        <div class="form-check student-check-card">
                                            <input class="form-check-input student-checkbox" 
                                                   type="checkbox" 
                                                   name="SelectedStudentIds" 
                                                   value="@student.dershaneid" 
                                                   id="student_@student.dershaneid">
                                            <label class="form-check-label w-100" for="student_@student.dershaneid">
                                                <div class="d-flex align-items-center">
                                                    <i class="bi bi-person-circle me-2 text-primary"></i>
                                                    <div>
                                                        <div class="fw-medium">@student.firstname @student.lastname</div>
                                                        <small class="text-muted">@student.dershaneid</small>
                                                    </div>
                                                </div>
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Seçim Özeti -->
                        <div class="selection-summary mt-3">
                            <div class="alert alert-info d-flex align-items-center">
                                <i class="bi bi-info-circle me-2"></i>
                                <span id="selectionCount">0 öğrenci seçildi</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            Bu sınıfa atanabilecek öğrenci bulunamadı.
                        </div>
                    }
                </div>

                <!-- Gönder Butonu -->
                <div class="text-end">
                    <button type="submit" class="btn btn-primary btn-lg">
                        <i class="bi bi-check-circle-fill me-2"></i>Sınıfı Oluştur
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Öğrenci arama işlevi
        document.getElementById('studentSearch').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const studentItems = document.querySelectorAll('.student-item');
            
            studentItems.forEach(item => {
                const studentName = item.getAttribute('data-name').toLowerCase();
                const studentId = item.getAttribute('data-id').toLowerCase();
                
                if (studentName.includes(searchTerm) || studentId.includes(searchTerm)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        });

        // Tüm öğrencileri seç
        function selectAllStudents() {
            const checkboxes = document.querySelectorAll('.student-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = true;
            });
            updateSelectionCount();
        }

        // Tüm seçimleri temizle
        function clearAllStudents() {
            const checkboxes = document.querySelectorAll('.student-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            updateSelectionCount();
        }

        // Seçim sayısını güncelle
        function updateSelectionCount() {
            const selectedCount = document.querySelectorAll('.student-checkbox:checked').length;
            document.getElementById('selectionCount').textContent = `${selectedCount} öğrenci seçildi`;
        }

        // Checkbox değişikliklerini dinle
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('student-checkbox')) {
                updateSelectionCount();
            }
        });

        // Form gönderim kontrolü
        document.getElementById('createClassForm').addEventListener('submit', function(e) {
            const selectedStudents = document.querySelectorAll('.student-checkbox:checked');
            const selectedTeacher = document.querySelector('[name="TeacherId"]').value;
            
            if (selectedStudents.length === 0 && !selectedTeacher) {
                e.preventDefault();
                alert('Sınıf oluşturmak için en az bir öğrenci seçin veya bir öğretmen atayın.');
                return false;
            }
        });

        // Sayfa yüklendiğinde seçim sayısını güncelle
        document.addEventListener('DOMContentLoaded', function() {
            updateSelectionCount();
        });
    </script>
}

@section Styles {
    <style>
        .create-class-wrapper .card {
            background: rgba(30, 30, 46, 0.9);
            border: 1px solid rgba(255, 255, 255, 0.08) !important;
            border-radius: 16px;
            color: rgba(255, 255, 255, 0.95);
        }

        .hero-card { background: linear-gradient(135deg, rgba(99,102,241,0.15), rgba(30,30,46,0.9)); }
        .hero-icon {
            width: 64px; height: 64px; display: grid; place-items: center; font-size: 2rem;
            border-radius: 14px; background: linear-gradient(135deg, rgba(99,102,241,0.25), rgba(139,92,246,0.2));
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }
        .hero-title { font-weight: 800; letter-spacing: .3px; }
        .hero-subtitle { color: rgba(255, 255, 255, 0.75); }

        .form-control, .form-select {
            background: rgba(255,255,255,.06);
            border: 1px solid rgba(255,255,255,.1);
            color: #fff;
        }
        .form-control::placeholder { color: rgba(255,255,255,.6); }
        .form-control:focus, .form-select:focus {
            border-color: rgba(99,102,241,.4);
            box-shadow: 0 0 0 .2rem rgba(99,102,241,.15);
            background: rgba(255,255,255,.08);
        }

        .student-check-card {
            background: rgba(17, 17, 27, 0.6);
            border: 1px solid rgba(255,255,255,.08);
            border-radius: 12px;
            padding: 12px;
            transition: all .25s ease;
            cursor: pointer;
        }
        .student-check-card:hover {
            background: rgba(17, 17, 27, 0.8);
            border-color: rgba(99,102,241,.3);
            transform: translateY(-2px);
        }
        .student-check-card .form-check-input:checked ~ .form-check-label {
            color: rgba(99,102,241,.9);
        }

        .form-check-input {
            background-color: rgba(255,255,255,.1);
            border-color: rgba(255,255,255,.2);
        }
        .form-check-input:checked {
            background-color: #6366f1;
            border-color: #6366f1;
        }

        .btn.btn-primary { background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); border: none; }
        .btn.btn-primary:hover { filter: brightness(1.05); }

        .alert { background: rgba(255,255,255,.05); border: 1px solid rgba(255,255,255,.1); }
        .alert-warning { background: rgba(245, 158, 11, 0.1); border-color: rgba(245, 158, 11, 0.2); }
        .alert-info { background: rgba(59, 130, 246, 0.1); border-color: rgba(59, 130, 246, 0.2); }

        @@media (max-width: 576px) {
            .hero-title { font-size: 1.6rem; }
            .hero-icon { width: 52px; height: 52px; font-size: 1.6rem; }
        }
    </style>
}