@model TakeExamVM
@{
    ViewData["Title"] = "Sƒ±navƒ± √á√∂z";
}

<div class="exam-wrapper container-xxl py-4">
    <!-- Hero Ba≈ülƒ±k -->
    <div class="card hero-card shadow-lg border-0 mb-4">
        <div class="card-body d-flex flex-column flex-lg-row align-items-center justify-content-between gap-3 p-4 p-lg-5">
            <div class="d-flex align-items-center gap-3">
                <div class="hero-icon">üéØ</div>
                <div>
                    <h1 class="hero-title mb-1">@Model.Title</h1>
                    <p class="hero-subtitle mb-0">@Model.Lesson ‚Ä¢ @Model.Description</p>
                </div>
            </div>
            <div class="text-center text-lg-end">
                <span class="badge bg-danger fs-6 d-inline-flex align-items-center gap-2" id="timer">
                    <i class="bi bi-clock"></i> <span id="timeLeft">@Model.Duration:00</span>
                </span>
            </div>
        </div>
    </div>

    <div class="row g-3">
        <div class="col-lg-9">
            <!-- Uyarƒ± Kartƒ± -->
            <div class="card shadow-sm border-0 mb-3">
                <div class="card-body">
                    <div class="d-flex align-items-start gap-3">
                        <div class="text-warning fs-4">‚ö†Ô∏è</div>
                        <div>
                            <div class="fw-semibold mb-1">Sƒ±nav Kurallarƒ±</div>
                            <div class="opacity-75">
                                - Sayfayƒ± yenilemeyin veya sekmeyi kapatmayƒ±n; ilerlemeniz kaybolabilir.<br>
                                - S√ºre dolduƒüunda sƒ±nav otomatik olarak g√∂nderilir.<br>
                                - Tarayƒ±cƒ± geli≈ütirici ara√ßlarƒ± sƒ±nav sƒ±rasƒ±nda kƒ±sƒ±tlanmƒ±≈ütƒ±r.
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sƒ±nav Formu -->
            <div class="card shadow-sm border-0">
                <div class="card-body p-3 p-lg-4">
                    <form asp-action="SubmitExam" method="post" id="examForm">
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="ExamId" />
                        <input type="hidden" asp-for="StartTime" />

                        @for (int i = 0; i < Model.Questions.Count; i++)
                        {
                            var questionId = Model.Questions[i].Id;
                            var selectedAnswer = Model.StudentAnswers.ContainsKey(questionId) ? Model.StudentAnswers[questionId] : "";
                            <div class="question-block border rounded p-3 p-lg-4 mb-3 bg-dark" id="q-block-@i">
                                <div class="d-flex align-items-center justify-content-between mb-2">
                                    <h5 class="text-primary mb-0">Soru @(i + 1)</h5>
                                    <span class="badge bg-primary-subtle text-primary-emphasis">@Model.Questions[i].Points Puan</span>
                                </div>
                                <p class="fs-6 mb-3">@Model.Questions[i].QuestionText</p>
                                <div class="options">
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio"
                                               name="StudentAnswers[@questionId]"
                                               value="A"
                                               id="q@(questionId)_A"
                                               @(selectedAnswer == "A" ? "checked" : "") />
                                        <label class="form-check-label" for="q@(questionId)_A">
                                            <strong>A)</strong> @Model.Questions[i].OptionA
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio"
                                               name="StudentAnswers[@questionId]"
                                               value="B"
                                               id="q@(questionId)_B"
                                               @(selectedAnswer == "B" ? "checked" : "") />
                                        <label class="form-check-label" for="q@(questionId)_B">
                                            <strong>B)</strong> @Model.Questions[i].OptionB
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio"
                                               name="StudentAnswers[@questionId]"
                                               value="C"
                                               id="q@(questionId)_C"
                                               @(selectedAnswer == "C" ? "checked" : "") />
                                        <label class="form-check-label" for="q@(questionId)_C">
                                            <strong>C)</strong> @Model.Questions[i].OptionC
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio"
                                               name="StudentAnswers[@questionId]"
                                               value="D"
                                               id="q@(questionId)_D"
                                               @(selectedAnswer == "D" ? "checked" : "") />
                                        <label class="form-check-label" for="q@(questionId)_D">
                                            <strong>D)</strong> @Model.Questions[i].OptionD
                                        </label>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="text-center mt-4">
                            <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">
                                <i class="bi bi-check-circle"></i> Sƒ±navƒ± G√∂nder
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-3">
            <div class="card shadow-sm border-0 sticky-top" style="top: 16px;">
                <div class="card-header bg-transparent">
                    <h6 class="mb-0"><i class="bi bi-grid-3x3-gap me-2 text-info"></i>Soru Gezgini</h6>
                </div>
                <div class="card-body">
                    <div class="question-nav d-flex flex-wrap">
                        @for (int i = 0; i < Model.Questions.Count; i++)
                        {
                            var qid = Model.Questions[i].Id;
                            var isAnswered = Model.StudentAnswers.ContainsKey(qid) && !string.IsNullOrEmpty(Model.StudentAnswers[qid]);
                            <button type="button"
                                    class="btn btn-sm @(isAnswered ? "btn-success" : "btn-outline-secondary") m-1 question-nav-btn"
                                    data-question="@i"
                                    id="nav-btn-@i"
                                    onclick="scrollToQuestion(@i)">
                                @(i + 1)
                            </button>
                        }
                    </div>

                    <hr>
                    <div class="progress mb-2">
                        <div class="progress-bar bg-success" role="progressbar" id="answerProgress"
                             style="width: @(Model.Questions.Count == 0 ? 0 : (Model.StudentAnswers.Count * 100 / Model.Questions.Count))%">
                        </div>
                    </div>
                    <small class="text-muted" id="answeredCounter">
                        Cevaplanan: @Model.StudentAnswers.Count / @Model.Questions.Count
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Zamanlayƒ±cƒ±
let timeLeft = @Model.Duration * 60; // saniye
const examStartTime = new Date('@Model.StartTime.ToString("yyyy-MM-ddTHH:mm:ss")');
const now = new Date();
let elapsed = Math.floor((now - examStartTime) / 1000);
timeLeft = Math.max(0, timeLeft - elapsed);

const timerInterval = setInterval(() => {
    if (timeLeft <= 0) {
        clearInterval(timerInterval);
        alert('‚è∞ S√ºre doldu! Sƒ±navƒ±nƒ±z otomatik olarak g√∂nderiliyor.');
        document.getElementById('examForm').submit();
        return;
    }
    const m = Math.floor(timeLeft / 60);
    const s = timeLeft % 60;
    document.getElementById('timeLeft').textContent = `${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;

    if (timeLeft === 300) {
        alert('‚ö†Ô∏è Uyarƒ±: Sadece 5 dakikanƒ±z kaldƒ±!');
        const t = document.getElementById('timer');
        t.classList.add('bg-warning');
        t.classList.remove('bg-danger');
    }
    if (timeLeft === 60) {
        alert('üö® Kritik: Sadece 1 dakikanƒ±z kaldƒ±!');
        const t = document.getElementById('timer');
        t.classList.add('bg-danger');
        t.classList.remove('bg-warning');
    }

    timeLeft--;
}, 1000);

// Soru Gezgini: Sorulara kaydƒ±r
function scrollToQuestion(index) {
    const block = document.getElementById(`q-block-${index}`);
    if (!block) return;
    block.scrollIntoView({ behavior: 'smooth', block: 'start' });
    block.classList.add('highlight');
    setTimeout(() => block.classList.remove('highlight'), 1200);
}

// Cevap izleme ve ilerleme √ßubuƒüu g√ºncelleme
function updateProgress() {
    const qBlocks = document.querySelectorAll('.question-block');
    let answered = 0;
    qBlocks.forEach((block, idx) => {
        const radios = block.querySelectorAll('input[type="radio"]');
        const name = radios[0]?.name;
        const checked = [...radios].some(r => r.checked);
        if (checked) answered++;
        const navBtn = document.getElementById(`nav-btn-${idx}`);
        if (navBtn) {
            navBtn.classList.toggle('btn-success', checked);
            navBtn.classList.toggle('btn-outline-secondary', !checked);
        }
    });
    const total = qBlocks.length;
    const percent = total === 0 ? 0 : Math.round(answered * 100 / total);
    const bar = document.getElementById('answerProgress');
    if (bar) bar.style.width = percent + '%';
    const counter = document.getElementById('answeredCounter');
    if (counter) counter.textContent = `Cevaplanan: ${answered} / ${total}`;
}

// T√ºm radio inputlarƒ±na dinleyici ekle
function bindAnswerListeners() {
    document.querySelectorAll('.question-block input[type="radio"]').forEach(r => {
        r.addEventListener('change', updateProgress);
    });
}

document.addEventListener('DOMContentLoaded', () => {
    bindAnswerListeners();
    updateProgress();
});

// Sƒ±nav sƒ±rasƒ±nda sayfadan ayrƒ±lmayƒ± uyar
window.addEventListener('beforeunload', function (e) {
    e.preventDefault();
    e.returnValue = 'Ayrƒ±lmak istediƒüinize emin misiniz? Sƒ±nav ilerlemeniz kaybolabilir!';
});

// Saƒü tƒ±k ve bazƒ± kƒ±sayollarƒ± kƒ±sƒ±tla
document.addEventListener('contextmenu', function (e) { e.preventDefault(); });
document.addEventListener('keydown', function (e) {
    if (e.key === 'F12' || (e.ctrlKey && e.shiftKey && e.key.toUpperCase() === 'I') || (e.ctrlKey && e.key.toUpperCase() === 'U')) {
        e.preventDefault();
        alert('üö´ Sƒ±nav sƒ±rasƒ±nda geli≈ütirici ara√ßlarƒ± devre dƒ±≈üƒ±dƒ±r.');
    }
});

// G√∂nderim onayƒ±
document.getElementById('examForm').addEventListener('submit', function (e) {
    const ok = confirm('Sƒ±navƒ± g√∂ndermek istediƒüinize emin misiniz? G√∂nderdikten sonra cevaplarƒ±nƒ±zƒ± deƒüi≈ütiremezsiniz.');
    if (!ok) e.preventDefault();
});
</script>

@section Styles {
    <style>
        .exam-wrapper .card {
            background: rgba(30, 30, 46, 0.9);
            border: 1px solid rgba(255, 255, 255, 0.08) !important;
            border-radius: 16px;
            color: rgba(255, 255, 255, 0.95);
        }
        .hero-card { background: linear-gradient(135deg, rgba(99,102,241,0.15), rgba(30,30,46,0.9)); }
        .hero-icon {
            width: 64px; height: 64px; display: grid; place-items: center; font-size: 2rem;
            border-radius: 14px; background: linear-gradient(135deg, rgba(99,102,241,0.25), rgba(139,92,246,0.2));
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }
        .hero-title { font-weight: 800; letter-spacing: .3px; }
        .hero-subtitle { color: rgba(255, 255, 255, 0.75); }

        .question-block { border: 1px solid rgba(255,255,255,.08) !important; background: rgba(17, 17, 27, 0.6) !important; }
        .question-block.highlight { outline: 2px solid rgba(99,102,241,.5); transition: outline .3s ease; }

        .form-check-input { cursor: pointer; }
        .form-check-input:checked { background-color: #6366f1; border-color: #6366f1; }

        .progress { background: rgba(255,255,255,.06); height: 8px; }

        .btn.btn-primary { background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); border: none; }
        .btn.btn-primary:hover { filter: brightness(1.05); }

        @@media (max-width: 576px) {
            .hero-title { font-size: 1.6rem; }
            .hero-icon { width: 52px; height: 52px; font-size: 1.6rem; }
        }
    </style>
}