@model CreateExamVM

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card shadow-lg">
                <div class="card-header bg-success text-white">
                    <h3 class="mb-0">üéØ Create New Exam - Make Students Sweat!</h3>
                </div>
                <div class="card-body">
                    <form asp-action="CreateExam" method="post" id="examForm">
                        @Html.AntiForgeryToken()
                        
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Exam Title</label>
                                <input asp-for="Title" class="form-control" placeholder="√ñrn: Matematik Ara Sƒ±navƒ±" />
                                <span asp-validation-for="Title" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Lesson</label>
                                <select asp-for="Lesson" asp-items="Model.Lessons" class="form-select" id="lessonSelect">
                                    <option value="">Select Lesson</option>
                                </select>
                                <span asp-validation-for="Lesson" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label fw-bold">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="3" placeholder="Sƒ±nav a√ßƒ±klamasƒ±..."></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Exam Date</label>
                                <input asp-for="ExamDate" type="datetime-local" class="form-control" />
                                <span asp-validation-for="ExamDate" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label fw-bold">Duration (minutes)</label>
                                <input asp-for="Duration" type="number" class="form-control" min="1" max="300" />
                                <span asp-validation-for="Duration" class="text-danger"></span>
                            </div>
                        </div>

                        <hr class="my-4">
                        <h4 class="text-primary">üìù Questions</h4>
                        
                        <!-- AI Question Generator Section -->
                        <div class="card mb-4 border-info">
                            <div class="card-header bg-info text-white">
                                <h5 class="mb-0">ü§ñ AI Question Generator</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-8">
                                        <label class="form-label">Topic/Subject for AI Questions</label>
                                        <input type="text" id="aiTopic" class="form-control" placeholder="√ñrn: Matematik - T√ºrev, Tarih - Osmanlƒ± ƒ∞mparatorluƒüu, Fizik - Hareket" />
                                        <small class="text-muted">Enter the specific topic you want AI to generate questions about</small>
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Question Count</label>
                                        <input type="number" id="aiQuestionCount" class="form-control" min="1" max="10" value="3" />
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Difficulty</label>
                                        <select id="aiDifficulty" class="form-select">
                                            <option value="easy">Easy</option>
                                            <option value="medium" selected>Medium</option>
                                            <option value="hard">Hard</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <button type="button" class="btn btn-info" onclick="generateAIQuestions()" id="generateBtn">
                                        <i class="bi bi-robot"></i> Generate AI Questions
                                    </button>
                                    <div id="aiLoadingSpinner" class="spinner-border spinner-border-sm ms-2 d-none" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                                <div id="aiErrorMessage" class="alert alert-danger mt-3 d-none"></div>
                            </div>
                        </div>
                        
                        <div id="questionsContainer">
                            @for (int i = 0; i < Model.Questions.Count; i++)
                            {
                                <div class="question-block border rounded p-3 mb-3 bg-dark">
                                    <h6 class="text-success">Question @(i + 1)</h6>
                                    
                                    <div class="mb-3">
                                        <label class="form-label">Question Text</label>
                                        <textarea asp-for="Questions[i].QuestionText" class="form-control" rows="2"></textarea>
                                        <span asp-validation-for="Questions[i].QuestionText" class="text-danger"></span>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-2">
                                            <label class="form-label">Option A</label>
                                            <input asp-for="Questions[i].OptionA" class="form-control" />
                                        </div>
                                        <div class="col-md-6 mb-2">
                                            <label class="form-label">Option B</label>
                                            <input asp-for="Questions[i].OptionB" class="form-control" />
                                        </div>
                                        <div class="col-md-6 mb-2">
                                            <label class="form-label">Option C</label>
                                            <input asp-for="Questions[i].OptionC" class="form-control" />
                                        </div>
                                        <div class="col-md-6 mb-2">
                                            <label class="form-label">Option D</label>
                                            <input asp-for="Questions[i].OptionD" class="form-control" />
                                        </div>
                                    </div>

                                    <div class="row mt-2">
                                        <div class="col-md-6">
                                            <label class="form-label">Correct Answer</label>
                                            <select asp-for="Questions[i].CorrectAnswer" class="form-select">
                                                <option value="">Select</option>
                                                <option value="A">A</option>
                                                <option value="B">B</option>
                                                <option value="C">C</option>
                                                <option value="D">D</option>
                                            </select>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Points</label>
                                            <input asp-for="Questions[i].Points" type="number" class="form-control" min="1" max="100" value="5" />
                                        </div>
                                    </div>
                                    
                                    <button type="button" class="btn btn-sm btn-danger mt-2" onclick="removeQuestion(this)">
                                        <i class="bi bi-trash"></i> Remove Question
                                    </button>
                                </div>
                            }
                        </div>

                        <div class="text-center mb-4">
                            <button type="button" class="btn btn-outline-primary" onclick="addQuestion()">
                                <i class="bi bi-plus-circle"></i> Add Manual Question
                            </button>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-success btn-lg">
                                <i class="bi bi-check-lg"></i> Create Exam - Let's Make Them Sweat! üòà
                            </button>
                            <a asp-action="ViewExamSystem" class="btn btn-secondary">
                                <i class="bi bi-arrow-left"></i> Back to Exams
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let questionCount = @Model.Questions.Count;

function addQuestion() {
    const container = document.getElementById('questionsContainer');
    const currentIndex = document.querySelectorAll('.question-block').length; // Mevcut soru sayƒ±sƒ±nƒ± al
    
    const questionHtml = `
        <div class="question-block border rounded p-3 mb-3 bg-dark">
            <h6 class="text-success">Question ${currentIndex + 1}</h6>
            
            <div class="mb-3">
                <label class="form-label">Question Text</label>
                <textarea name="Questions[${currentIndex}].QuestionText" class="form-control" rows="2"></textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-2">
                    <label class="form-label">Option A</label>
                    <input name="Questions[${currentIndex}].OptionA" class="form-control" />
                </div>
                <div class="col-md-6 mb-2">
                    <label class="form-label">Option B</label>
                    <input name="Questions[${currentIndex}].OptionB" class="form-control" />
                </div>
                <div class="col-md-6 mb-2">
                    <label class="form-label">Option C</label>
                    <input name="Questions[${currentIndex}].OptionC" class="form-control" />
                </div>
                <div class="col-md-6 mb-2">
                    <label class="form-label">Option D</label>
                    <input name="Questions[${currentIndex}].OptionD" class="form-control" />
                </div>
            </div>

            <div class="row mt-2">
                <div class="col-md-6">
                    <label class="form-label">Correct Answer</label>
                    <select name="Questions[${currentIndex}].CorrectAnswer" class="form-select">
                        <option value="">Select</option>
                        <option value="A">A</option>
                        <option value="B">B</option>
                        <option value="C">C</option>
                        <option value="D">D</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Points</label>
                    <input name="Questions[${currentIndex}].Points" type="number" class="form-control" min="1" max="100" value="5" />
                </div>
            </div>
            
            <button type="button" class="btn btn-sm btn-danger mt-2" onclick="removeQuestion(this)">
                <i class="bi bi-trash"></i> Remove Question
            </button>
        </div>
    `;
    
    container.insertAdjacentHTML('beforeend', questionHtml);
}

function removeQuestion(button) {
    button.closest('.question-block').remove();
    reindexQuestions(); // Silme i≈üleminden sonra yeniden indeksle
}

// Soru indekslerini yeniden d√ºzenle - EN √ñNEMLƒ∞ FONKSƒ∞YON
function reindexQuestions() {
    const questionBlocks = document.querySelectorAll('.question-block');
    
    questionBlocks.forEach((block, index) => {
        // Ba≈ülƒ±ƒüƒ± g√ºncelle
        const title = block.querySelector('h6');
        if (title.textContent.includes('AI Generated')) {
            title.textContent = `ü§ñ AI Generated Question ${index + 1}`;
        } else {
            title.textContent = `Question ${index + 1}`;
        }
        
        // Input name'lerini g√ºncelle - BU KISIM √áOK √ñNEMLƒ∞
        const inputs = block.querySelectorAll('input, textarea, select');
        inputs.forEach(input => {
            const name = input.getAttribute('name');
            if (name && name.includes('Questions[')) {
                // Eski indeksi yeni indeks ile deƒüi≈ütir
                const newName = name.replace(/Questions\[\d+\]/, `Questions[${index}]`);
                input.setAttribute('name', newName);
                
                // Ayrƒ±ca id varsa onu da g√ºncelle
                const id = input.getAttribute('id');
                if (id && id.includes('Questions_')) {
                    const newId = id.replace(/Questions_\d+_/, `Questions_${index}_`);
                    input.setAttribute('id', newId);
                }
            }
        });
    });
}

function addAIGeneratedQuestion(question) {
    const container = document.getElementById('questionsContainer');
    const currentIndex = document.querySelectorAll('.question-block').length; // Mevcut soru sayƒ±sƒ±nƒ± al
    
    const questionHtml = `
        <div class="question-block border rounded p-3 mb-3 bg-dark border-info">
            <h6 class="text-info">ü§ñ AI Generated Question ${currentIndex + 1}</h6>
            
            <div class="mb-3">
                <label class="form-label">Question Text</label>
                <textarea name="Questions[${currentIndex}].QuestionText" class="form-control" rows="2">${question.questionText}</textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-2">
                    <label class="form-label">Option A</label>
                    <input name="Questions[${currentIndex}].OptionA" class="form-control" value="${question.optionA}" />
                </div>
                <div class="col-md-6 mb-2">
                    <label class="form-label">Option B</label>
                    <input name="Questions[${currentIndex}].OptionB" class="form-control" value="${question.optionB}" />
                </div>
                <div class="col-md-6 mb-2">
                    <label class="form-label">Option C</label>
                    <input name="Questions[${currentIndex}].OptionC" class="form-control" value="${question.optionC}" />
                </div>
                <div class="col-md-6 mb-2">
                    <label class="form-label">Option D</label>
                    <input name="Questions[${currentIndex}].OptionD" class="form-control" value="${question.optionD}" />
                </div>
            </div>

            <div class="row mt-2">
                <div class="col-md-6">
                    <label class="form-label">Correct Answer</label>
                    <select name="Questions[${currentIndex}].CorrectAnswer" class="form-select">
                        <option value="">Select</option>
                        <option value="A" ${question.correctAnswer === 'A' ? 'selected' : ''}>A</option>
                        <option value="B" ${question.correctAnswer === 'B' ? 'selected' : ''}>B</option>
                        <option value="C" ${question.correctAnswer === 'C' ? 'selected' : ''}>C</option>
                        <option value="D" ${question.correctAnswer === 'D' ? 'selected' : ''}>D</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Points</label>
                    <input name="Questions[${currentIndex}].Points" type="number" class="form-control" min="1" max="100" value="${question.points || 5}" />
                </div>
            </div>
            
            <button type="button" class="btn btn-sm btn-danger mt-2" onclick="removeQuestion(this)">
                <i class="bi bi-trash"></i> Remove Question
            </button>
        </div>
    `;
    
    container.insertAdjacentHTML('beforeend', questionHtml);
}

async function generateAIQuestions() {
    const topic = document.getElementById('aiTopic').value.trim();
    const count = document.getElementById('aiQuestionCount').value;
    const difficulty = document.getElementById('aiDifficulty').value;
    const lesson = document.querySelector('select[name="Lesson"]').value;
    
    if (!topic) {
        showAIError('Please enter a topic for AI question generation!');
        return;
    }
    
    if (!lesson) {
        showAIError('Please select a lesson first!');
        return;
    }
    
    const generateBtn = document.getElementById('generateBtn');
    const spinner = document.getElementById('aiLoadingSpinner');
    const errorDiv = document.getElementById('aiErrorMessage');
    
    // Show loading state
    generateBtn.disabled = true;
    spinner.classList.remove('d-none');
    errorDiv.classList.add('d-none');
    
    try {
        const response = await fetch('/Teacher/GenerateAIQuestions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                topic: topic,
                lesson: lesson,
                count: parseInt(count),
                difficulty: difficulty
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to generate questions');
        }
        
        const data = await response.json();
        
        if (data.success) {
            // Add generated questions to the form
            data.questions.forEach(question => {
                addAIGeneratedQuestion(question);
            });
            
            // Clear the topic input
            document.getElementById('aiTopic').value = '';
            
            // Show success message
            showAISuccess(`Successfully generated ${data.questions.length} questions! üéâ`);
            
            // Reindex all questions after adding AI questions
            reindexQuestions();
        } else {
            showAIError(data.message || 'Failed to generate questions');
        }
        
    } catch (error) {
        console.error('Error generating AI questions:', error);
        showAIError('An error occurred while generating questions. Please try again.');
    } finally {
        // Hide loading state
        generateBtn.disabled = false;
        spinner.classList.add('d-none');
    }
}

// Form submit edilmeden HEMEN √∂nce indeksleri kontrol et - BU √áOK √ñNEMLƒ∞
document.getElementById('examForm').addEventListener('submit', function(e) {
    console.log('Form submitting, reindexing questions...');
    reindexQuestions();
    
    // Debug i√ßin - hangi sorular g√∂nderiliyor kontrol et
    const formData = new FormData(this);
    for (let [key, value] of formData.entries()) {
        if (key.includes('Questions[')) {
            console.log(key + ': ' + value);
        }
    }
});

function showAIError(message) {
    const errorDiv = document.getElementById('aiErrorMessage');
    errorDiv.textContent = message;
    errorDiv.classList.remove('d-none');
    
    // Hide after 5 seconds
    setTimeout(() => {
        errorDiv.classList.add('d-none');
    }, 5000);
}


function showAISuccess(message) {
    // Create a temporary success alert
    const successDiv = document.createElement('div');
    successDiv.className = 'alert alert-success mt-3';
    successDiv.textContent = message;
    
    const aiCard = document.querySelector('.card.border-info .card-body');
    aiCard.appendChild(successDiv);
    
    // Remove after 3 seconds
    setTimeout(() => {
        successDiv.remove();
    }, 3000);
}

// Sayfa y√ºklendiƒüinde mevcut sorularƒ± yeniden indeksle
document.addEventListener('DOMContentLoaded', function() {
    reindexQuestions();
    console.log('Page loaded, questions reindexed');
});

// Debug fonksiyonu - hangi sorular var kontrol et
function debugQuestions() {
    const questionBlocks = document.querySelectorAll('.question-block');
    console.log(`Total questions: ${questionBlocks.length}`);
    
    questionBlocks.forEach((block, index) => {
        const inputs = block.querySelectorAll('input, textarea, select');
        console.log(`Question ${index}:`);
        inputs.forEach(input => {
            const name = input.getAttribute('name');
            const value = input.value;
            if (name && name.includes('Questions[')) {
                console.log(`  ${name}: ${value}`);
            }
        });
    });
}

// Soru ekleme butonuna tƒ±klandƒ±ƒüƒ±nda debug
document.querySelector('button[onclick="addQuestion()"]').addEventListener('click', function() {
    setTimeout(() => {
        console.log('After adding question:');
        debugQuestions();
    }, 100);
});

</script>

@section Scripts {
    <script>
        // Ek validasyon ve form kontrolleri
        $(document).ready(function() {
            // Form validation
            $('#examForm').on('submit', function(e) {
                const questionBlocks = document.querySelectorAll('.question-block');
                
                if (questionBlocks.length === 0) {
                    e.preventDefault();
                    alert('En az bir soru eklemelisiniz!');
                    return false;
                }
                
                // Her sorunun dolu olup olmadƒ±ƒüƒ±nƒ± kontrol et
                let hasEmptyQuestion = false;
                questionBlocks.forEach((block, index) => {
                    const questionText = block.querySelector('textarea[name*="QuestionText"]').value.trim();
                    const optionA = block.querySelector('input[name*="OptionA"]').value.trim();
                    const optionB = block.querySelector('input[name*="OptionB"]').value.trim();
                    const optionC = block.querySelector('input[name*="OptionC"]').value.trim();
                    const optionD = block.querySelector('input[name*="OptionD"]').value.trim();
                    const correctAnswer = block.querySelector('select[name*="CorrectAnswer"]').value;
                    
                    if (!questionText || !optionA || !optionB || !optionC || !optionD || !correctAnswer) {
                        hasEmptyQuestion = true;
                        console.log(`Question ${index + 1} has empty fields`);
                    }
                });
                
                if (hasEmptyQuestion) {
                    e.preventDefault();
                    alert('L√ºtfen t√ºm soru alanlarƒ±nƒ± doldurun!');
                    return false;
                }
                
                // Son bir kez reindex yap
                reindexQuestions();
                console.log('Final reindex before submit');
                
                return true;
            });
            
            // Lesson se√ßimi deƒüi≈ütiƒüinde AI topic'i temizle
            $('select[name="Lesson"]').on('change', function() {
                $('#aiTopic').val('');
            });
            
            // AI topic input'una enter basƒ±ldƒ±ƒüƒ±nda generate et
            $('#aiTopic').on('keypress', function(e) {
                if (e.which === 13) { // Enter key
                    e.preventDefault();
                    generateAIQuestions();
                }
            });
        });
    </script>
}