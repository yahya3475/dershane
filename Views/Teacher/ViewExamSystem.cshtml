@model List<dershane.Models.ExamSystem>
@{
    ViewData["Title"] = "Sƒ±nav Sistemi";
}

<div class="exam-system-wrapper container-xxl py-4">
    <!-- Hero Ba≈ülƒ±k -->
    <div class="card hero-card shadow-lg border-0 mb-4">
        <div class="card-body d-flex flex-column flex-lg-row align-items-center justify-content-between gap-3 p-4 p-lg-5">
            <div class="d-flex align-items-center gap-3">
                <div class="hero-icon">üéØ</div>
                <div>
                    <h1 class="hero-title mb-1">Sƒ±nav Sistemi</h1>
                    <p class="hero-subtitle mb-0">Sƒ±navlarƒ±nƒ±zƒ± y√∂netin, sonu√ßlarƒ± g√∂r√ºnt√ºleyin ve analiz edin.</p>
                </div>
            </div>
            <div class="text-center text-lg-end">
                <div class="d-flex gap-2 flex-wrap">
                    <a asp-action="CreateExam" class="btn btn-primary btn-sm">
                        <i class="bi bi-plus-circle me-2"></i>Yeni Sƒ±nav
                    </a>
                    <a asp-action="ViewExams" class="btn btn-outline-light btn-sm">
                        <i class="bi bi-list me-2"></i>Sonu√ßlar
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Bildirimler -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>@TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>@TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (Model != null && Model.Any())
    {
        <div class="row g-3">
            @foreach (var exam in Model)
            {
                var isUpcoming = exam.ExamDate > DateTime.Now;
                var isActive = exam.ExamDate <= DateTime.Now && exam.ExamDate.AddMinutes(exam.Duration) > DateTime.Now;
                var isExpired = exam.ExamDate.AddMinutes(exam.Duration) <= DateTime.Now;

                <div class="col-md-6 col-lg-4">
                    <div class="card exam-card h-100 shadow-sm border-0">
                        <div class="card-header exam-header @(isActive ? "status-active" : isUpcoming ? "status-upcoming" : isExpired ? "status-finished" : "status-draft")">
                            <div class="d-flex justify-content-between align-items-center">
                                <h6 class="card-title mb-0 fw-semibold">@exam.Title</h6>
                                @if (isActive)
                                {
                                    <span class="badge bg-danger blink">üî¥ CANLI</span>
                                }
                                else if (isUpcoming)
                                {
                                    <span class="badge bg-info">‚è∞ Yakla≈üan</span>
                                }
                                else if (isExpired)
                                {
                                    <span class="badge bg-success">‚úÖ Tamamlandƒ±</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">üìã Taslak</span>
                                }
                            </div>
                            <small class="opacity-75">üìö @exam.Lesson</small>
                        </div>

                        <div class="card-body">
                            <p class="card-text text-muted mb-3">@exam.Description</p>

                            <div class="exam-stats mb-3">
                                <div class="row text-center g-2">
                                    <div class="col-4">
                                        <div class="stat-item">
                                            <div class="stat-value text-primary">@exam.Questions.Count</div>
                                            <div class="stat-label">Soru</div>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="stat-item">
                                            <div class="stat-value text-warning">@exam.Duration</div>
                                            <div class="stat-label">Dakika</div>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="stat-item">
                                            <div class="stat-value text-info">@exam.StudentResults.Count</div>
                                            <div class="stat-label">Katƒ±lƒ±m</div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="exam-details mb-3">
                                <div class="detail-item">
                                    <i class="bi bi-calendar3 me-2 text-primary"></i>
                                    <span class="fw-medium">Tarih:</span> @exam.ExamDate.ToString("dd/MM/yyyy")
                                </div>
                                <div class="detail-item">
                                    <i class="bi bi-clock me-2 text-success"></i>
                                    <span class="fw-medium">Saat:</span> @exam.ExamDate.ToString("HH:mm") - @exam.ExamDate.AddMinutes(exam.Duration).ToString("HH:mm")
                                </div>
                                <div class="detail-item">
                                    <i class="bi bi-people me-2 text-info"></i>
                                    <span class="fw-medium">Sƒ±nƒ±f:</span> @exam.UClass
                                </div>
                            </div>

                            <div class="status-indicator">
                                @if (exam.IsActive)
                                {
                                    <div class="alert alert-success alert-sm">
                                        <i class="bi bi-check-circle me-2"></i><strong>Aktif</strong>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-secondary alert-sm">
                                        <i class="bi bi-pause-circle me-2"></i><strong>Pasif</strong>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="card-footer bg-transparent">
                            <div class="btn-group w-100" role="group">
                                <a asp-action="EditExamSystem" asp-route-examId="@exam.Id"
                                   class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-pencil"></i> D√ºzenle
                                </a>
                                <a asp-action="ViewExamResults" asp-route-examId="@exam.Id" 
                                   class="btn btn-outline-info btn-sm">
                                    <i class="bi bi-bar-chart"></i> Sonu√ßlar
                                </a>
                                <form asp-action="DeleteExam" asp-route-examId="@exam.Id" method="post" class="d-inline"
                                      onsubmit="return confirm('Bu sƒ±navƒ± silmek istediƒüinize emin misiniz?');">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-outline-danger btn-sm">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state-card card shadow-sm border-0">
            <div class="card-body text-center py-5">
                <div class="empty-icon mb-3">üìù</div>
                <h4 class="empty-title mb-2">Hen√ºz Sƒ±nav Olu≈üturulmamƒ±≈ü</h4>
                <p class="empty-subtitle mb-4">ƒ∞lk sƒ±navƒ±nƒ±zƒ± olu≈üturarak ba≈ülayƒ±n!</p>
                <a asp-action="CreateExam" class="btn btn-primary btn-lg">
                    <i class="bi bi-plus-circle me-2"></i>ƒ∞lk Sƒ±navƒ± Olu≈ütur
                </a>
            </div>
        </div>
    }
</div>

@section Styles {
    <style>
        .exam-system-wrapper .card {
            background: rgba(30, 30, 46, 0.9);
            border: 1px solid rgba(255, 255, 255, 0.08) !important;
            border-radius: 16px;
            color: rgba(255, 255, 255, 0.95);
        }

        .hero-card { background: linear-gradient(135deg, rgba(99,102,241,0.15), rgba(30,30,46,0.9)); }
        .hero-icon {
            width: 64px; height: 64px; display: grid; place-items: center; font-size: 2rem;
            border-radius: 14px; background: linear-gradient(135deg, rgba(99,102,241,0.25), rgba(139,92,246,0.2));
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }
        .hero-title { font-weight: 800; letter-spacing: .3px; }
        .hero-subtitle { color: rgba(255, 255, 255, 0.75); }

        .exam-card { transition: all .25s ease; overflow: hidden; }
        .exam-card:hover { transform: translateY(-4px); box-shadow: 0 12px 24px rgba(0,0,0,.25) !important; }

        .exam-header {
            background: rgba(17, 17, 27, 0.8);
            border-bottom: 1px solid rgba(255,255,255,.08);
            padding: 1rem;
        }
        .status-active { border-left: 4px solid #f59e0b; }
        .status-upcoming { border-left: 4px solid #3b82f6; }
        .status-finished { border-left: 4px solid #10b981; }
        .status-draft { border-left: 4px solid #6b7280; }

        .exam-stats { background: rgba(17, 17, 27, 0.4); border-radius: 12px; padding: 1rem; }
        .stat-item { padding: .5rem; }
        .stat-value { font-size: 1.2rem; font-weight: 700; line-height: 1; }
        .stat-label { font-size: .8rem; color: rgba(255,255,255,.7); font-weight: 500; }

        .exam-details { font-size: .9rem; }
        .detail-item { margin-bottom: .5rem; color: rgba(255,255,255,.8); }

        .alert-sm { padding: .5rem .75rem; margin-bottom: 0; font-size: .85rem; }
        .alert { background: rgba(255,255,255,.05); border: 1px solid rgba(255,255,255,.1); }
        .alert-success { background: rgba(34, 197, 94, 0.1); border-color: rgba(34, 197, 94, 0.2); }
        .alert-secondary { background: rgba(107, 114, 128, 0.1); border-color: rgba(107, 114, 128, 0.2); }

        .empty-state-card { background: rgba(17, 17, 27, 0.6) !important; }
        .empty-icon { font-size: 4rem; opacity: .7; }
        .empty-title { color: rgba(255,255,255,.9); }
        .empty-subtitle { color: rgba(255,255,255,.6); }

        .btn.btn-primary { background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); border: none; }
        .btn.btn-primary:hover { filter: brightness(1.05); }

        .blink { animation: blink 1s infinite; }
        @@keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.5; }
        }

        @@media (max-width: 576px) {
            .hero-title { font-size: 1.6rem; }
            .hero-icon { width: 52px; height: 52px; font-size: 1.6rem; }
        }
    </style>
}